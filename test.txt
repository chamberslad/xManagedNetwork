# User running Terraform
module "userinfo" {
  source = "https://REDACTED.blob.core.windows.net/terraformtemplates/AzureUserInfo_2.0.0.0.zip"
}
# Variables used internally
locals {
  base_tags = {
    Source       = "TFModule-AzureNSG_2.0.0.0"
    CreatedDate  = timestamp()
    CreatorName  = module.userinfo.name
    CreatorObjId = module.userinfo.object_id
    CreatorType  = module.userinfo.object_type
  }
  tf_tag = module.userinfo.ado_user != "" ? merge(local.base_tags, { InitiatedBy = module.userinfo.ado_user }) : local.base_tags
  # Input normalization because we can't use lookup() in the dynamic block
  security_rules = [for rule in var.security_rules : {
    name                                       = "${rule.access}-${rule.source}-${rule.destination}-${rule.traffic_type}-${rule.direction}"
    access                                     = rule.access
    description                                = rule.description
    destination_address_prefix                 = lookup(rule, "destination_address_prefix", null)
    destination_address_prefixes               = lookup(rule, "destination_address_prefixes", null)
    destination_application_security_group_ids = lookup(rule, "destination_application_security_group_ids", null)
    destination_port_range                     = lookup(rule, "destination_port_range", null)
    destination_port_ranges                    = lookup(rule, "destination_port_ranges", null)
    direction                                  = rule.direction
    priority                                   = rule.priority
    protocol                                   = rule.protocol
    source_address_prefix                      = lookup(rule, "source_address_prefix", null)
    source_address_prefixes                    = lookup(rule, "source_address_prefixes", null)
    source_application_security_group_ids      = lookup(rule, "source_application_security_group_ids", null)
    source_port_range                          = lookup(rule, "source_port_range", null)
    source_port_ranges                         = lookup(rule, "source_port_ranges", null)
    }
  ]

}

data "azurerm_resource_group" "rg" {
  name = var.resource_group_name
}
data "azurerm_subnet" "sn" {
  name                 = var.subnet_name
  virtual_network_name = var.vnet_name
  resource_group_name  = data.azurerm_resource_group.rg.name
}
resource "azurerm_network_security_group" "nsg" {
  name                = "NSG-${var.subnet_name}"
  location            = data.azurerm_resource_group.rg.location
  resource_group_name = data.azurerm_resource_group.rg.name
  tags                = merge(local.tf_tag, var.tags)
  dynamic "security_rule" {
    for_each = local.security_rules
    content {
      name                                       = security_rule.value.name
      access                                     = security_rule.value.access
      description                                = security_rule.value.description
      destination_address_prefix                 = security_rule.value.destination_address_prefix
      destination_address_prefixes               = security_rule.value.destination_address_prefixes
      destination_application_security_group_ids = security_rule.value.destination_application_security_group_ids
      destination_port_range                     = security_rule.value.destination_port_range
      destination_port_ranges                    = security_rule.value.destination_port_ranges
      direction                                  = security_rule.value.direction
      priority                                   = security_rule.value.priority
      protocol                                   = security_rule.value.protocol
      source_address_prefix                      = security_rule.value.source_address_prefix
      source_address_prefixes                    = security_rule.value.source_address_prefixes
      source_application_security_group_ids      = security_rule.value.source_application_security_group_ids
      source_port_range                          = security_rule.value.source_port_range
      source_port_ranges                         = security_rule.value.source_port_ranges
    }
  }
  lifecycle {
    ignore_changes = [
      tags["CreatedDate"],
      tags["CreatorName"],
      tags["CreatorObjId"],
      tags["CreatorType"],
      tags["InitiatedBy"]
    ]
  }
}
resource "azurerm_subnet_network_security_group_association" "nsg_assoc" {
  network_security_group_id = azurerm_network_security_group.nsg.id
  subnet_id                 = data.azurerm_subnet.sn.id
}
